        -:    0:Source:adventurerfunction.c
        -:    0:Graph:adventurerfunction.gcno
        -:    0:Data:adventurerfunction.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:
function adventurerFunc called 1 returned 100% blocks executed 87%
        1:    3:int adventurerFunc(int currentPlayer, struct gameState *state) {
        1:    4:	int drawntreasure = 0;
        -:    5:	int cardDrawn;
        -:    6:	int temphand[MAX_HAND];
        1:    7:	int z = 0;
        -:    8:
        6:    9:	while (drawntreasure <= 2) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   10:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:			shuffle(currentPlayer, state);
call    0 never executed
        -:   12:		}
        4:   13:		drawCard(currentPlayer, state);
call    0 returned 100%
        4:   14:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        4:   15:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        3:   16:			drawntreasure++;
        -:   17:		else {
        1:   18:			temphand[z] = cardDrawn;
        1:   19:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:   20:											   // z++;
        -:   21:		}
        -:   22:	}
        2:   23:	while (z - 1 >= 0) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   24:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:   25:		z = z - 1;
        -:   26:	}
        1:   27:	return 0;
        -:   28:}
